# Emacs please make this -*- mode: makefile; tab-width: 8 -*-
#
# rSharp makefile specific for compilation on Windows, using the Visual CPP compiler.

# defaults the build configurations to the 'release' ones (i.e. no debug symbols)
BuildConfiguration ?= Debug
MODE ?= Build
MSB_OPTIONS_CONSOLELOGGER ?= //consoleloggerparameters:ErrorsOnly
## /consoleloggerparameters:ErrorsOnly;WarningsOnly;Verbosity=minimal

SLN= rSharp.sln

DOTNET_CMD=dotnet

MSB=@MSBUILD_EXE_PATH@

INSTDIR= ../inst
NETHOST=nethost
RUNTIMECONFIG=RSharp.runtimeconfig

# This can be helpful to diagnose the msbuild procedure
DEBUG_BUILD_CMD ?=

CLR_FACADE_BINS=ClrFacade.*
RDOTNET_BINS=RDotNet.* DynamicInterop.*
rSharpMs=rSharpMs

# I needed to use the -u -p options at some point to avoid odd cases where copying failed.
# For some odd reasons the files under /libs/ are copied with access rights such that they fail to load with dyn.load
# and R CMD check would fail with a misleading error message about not being a valid Win32 application.
# CP_CMD=cp -u -p -f

ROBOCP_CMD=cmd //c win_cp.cmd


# all: configinfo instdir rSharpLib

all: diagnose

diagnose: detailedconfiginfo instdir rSharpLib

configinfo:
	-@echo Build configuration "$(BuildConfiguration)"

detailedconfiginfo:
	-@echo **Variable information only for diagnosis purposes**
	-@echo Windows architecture "$(R_ARCH)"
	-@echo "env variable TEMP is $(TEMP)"
	-@echo "env variable TMP is $(TMP)"
	-@echo BuildConfiguration=$(BuildConfiguration)
	-@echo R_ARCH=$(R_ARCH)
	-@echo OBJECTS=$(OBJECTS)
	-@echo SHLIB_EXT=$(SHLIB_EXT)
	-@echo CC=$(CC)
	-@echo CXX=$(CXX)
	-@echo ALL_CFLAGS=$(ALL_CFLAGS)
	-@echo ALL_CPPFLAGS=$(ALL_CPPFLAGS)
	-@echo build cmd line: $(MSB) $(SLN) //t:$(MODE) //p:Configuration=$(BuildConfiguration) //p:Platform="replaced_tgt_platform" $(MSB_OPTIONS_EXTRA);
	-@echo **END Variable**

rSharpNugetRestore: rSharp.cpp
	-$(DOTNET_CMD) restore ;

rSharpLibComp: rSharpNugetRestore
	@for tgt_platform in x64; do \
		$(MSB) $(SLN) //t:$(MODE) //p:Configuration=$(BuildConfiguration) //p:Platform="$$tgt_platform" $(MSB_OPTIONS_EXTRA); \
	done; \

instdir:
	@for r_architecture in x64; do \
		rm -rf $(INSTDIR)/libs/ ; \
		mkdir -p $(INSTDIR) 2>/dev/null ; \
		mkdir -p $(INSTDIR)/libs/ 2>/dev/null ; \
	done;

rSharpLib: rSharpLibComp
	r_architecture=x64;\
	RSHARPBINDIR=./x64/$(BuildConfiguration);\
	bin_dir=$$RSHARPBINDIR; \
	RSHARPBINS="$(rSharpMs).dll $(rSharpMs).exp $(rSharpMs).lib $(rSharpMs).pdb " ; \
	$(ROBOCP_CMD) $$bin_dir $(INSTDIR)/libs/ $$RSHARPBINS;\
	
	
	$(ROBOCP_CMD) ./packages/Microsoft.NETCore.App.Host.win-x64.8.0.2/runtimes/win-x64/native $(INSTDIR)/libs/ $(NETHOST).dll
	$(ROBOCP_CMD) ./ $(INSTDIR)/libs/ $(RUNTIMECONFIG).json;
	-$(ROBOCP_CMD) ./ClrFacade/bin/$(BuildConfiguration)/net8.0/ $(INSTDIR)/libs/ $(CLR_FACADE_BINS)
	-$(ROBOCP_CMD) ./ClrFacade/bin/$(BuildConfiguration)/net8.0/ $(INSTDIR)/libs/ $(RDOTNET_BINS)

clean:
	$(MSB) $(SLN) //t:Clean

distclean: clean
	-rm -rf $(INSTDIR)

.PHONY: all
