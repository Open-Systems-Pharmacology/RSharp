% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/net-object.R
\name{NetObject}
\alias{NetObject}
\title{#' @title NetObject
#' @docType class
#'
#' @description
#' Base wrapper class for the S4 class `cobjRef` which holds pointers to .NET objects
#'
#' @importFrom R6
#'
#' @examples
#' myPrintable <- R6::R6Class(
#'   "myPrintable",
#'   inherit = Printable,
#'   public = list(
#'     x = NULL,
#'     y = NULL,
#'     print = function() {
#'       private$printClass()
#'       private$printLine("x", self$x)
#'       private$printLine("y", self$y)
#'       invisible(self)
#'     }
#'   )
#' )
#'
#' x <- myPrintable$new()
#' x}
\description{
#' @title NetObject
#' @docType class
#'
#' @description
#' Base wrapper class for the S4 class `cobjRef` which holds pointers to .NET objects
#'
#' @importFrom R6
#'
#' @examples
#' myPrintable <- R6::R6Class(
#'   "myPrintable",
#'   inherit = Printable,
#'   public = list(
#'     x = NULL,
#'     y = NULL,
#'     print = function() {
#'       private$printClass()
#'       private$printLine("x", self$x)
#'       private$printLine("y", self$y)
#'       invisible(self)
#'     }
#'   )
#' )
#'
#' x <- myPrintable$new()
#' x

#' @title NetObject
#' @docType class
#'
#' @description
#' Base wrapper class for the S4 class `cobjRef` which holds pointers to .NET objects
#'
#' @importFrom R6
#'
#' @examples
#' myPrintable <- R6::R6Class(
#'   "myPrintable",
#'   inherit = Printable,
#'   public = list(
#'     x = NULL,
#'     y = NULL,
#'     print = function() {
#'       private$printClass()
#'       private$printLine("x", self$x)
#'       private$printLine("y", self$y)
#'       invisible(self)
#'     }
#'   )
#' )
#'
#' x <- myPrintable$new()
#' x
}
\examples{

## ------------------------------------------------
## Method `NetObject$new`
## ------------------------------------------------

  testClassName <- "ClrFacade.Tests.RefClasses.LevelOneClass"
  o <- .External("r_create_clr_object", testClassName, PACKAGE = getRSharpSetting("nativePkgName"))
  x <- newObjectFromName(testClassName)
  print(x)
List the fields of the object


## ------------------------------------------------
## Method `NetObject$getFields`
## ------------------------------------------------

testClassName <- rSharpEnv$testObjectTypeName
testObj <- newObjectFromName(testClassName)
testObj$getFields()
testObj$getFields("ieldInt")
List the properties of the object


## ------------------------------------------------
## Method `NetObject$getProperties`
## ------------------------------------------------

testClassName <- "ClrFacade.TestObject"
testObj <- newObjectFromName(testClassName)
testObj$getProperties()
testObj$getProperties("One")
List the methods the object


## ------------------------------------------------
## Method `NetObject$getMethods`
## ------------------------------------------------

testClassName <- "ClrFacade.TestObject"
testObj <- newObjectFromName(testClassName)
testObj$getMethods()
testObj$getMethods("Get")
Print
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{type}}{The type of the .NET object. Read-only}

\item{\code{pointer}}{The external pointer to the .NET object. Read-only}

\item{\code{cobjRef}}{The underlying `cobjRef` object. Read-only
Initialize}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-NetObject-new}{\code{NetObject$new()}}
\item \href{#method-NetObject-getFields}{\code{NetObject$getFields()}}
\item \href{#method-NetObject-getProperties}{\code{NetObject$getProperties()}}
\item \href{#method-NetObject-getMethods}{\code{NetObject$getMethods()}}
\item \href{#method-NetObject-print}{\code{NetObject$print()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-new"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-new}{}}}
\subsection{Method \code{new()}}{
Initializes the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$new(pointer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pointer}}{The external pointer to the .NET object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The initialized object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{  testClassName <- "ClrFacade.Tests.RefClasses.LevelOneClass"
  o <- .External("r_create_clr_object", testClassName, PACKAGE = getRSharpSetting("nativePkgName"))
  x <- newObjectFromName(testClassName)
  print(x)
List the fields of the object

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getFields"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getFields}{}}}
\subsection{Method \code{getFields()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getFields(contains = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contains}}{a string that the field names returned must contain}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of names of the fields of the object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- rSharpEnv$testObjectTypeName
testObj <- newObjectFromName(testClassName)
testObj$getFields()
testObj$getFields("ieldInt")
List the properties of the object

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getProperties"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getProperties}{}}}
\subsection{Method \code{getProperties()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getProperties(contains = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contains}}{a string that the property names returned must contain}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of names of the properties of the object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- "ClrFacade.TestObject"
testObj <- newObjectFromName(testClassName)
testObj$getProperties()
testObj$getProperties("One")
List the methods the object

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getMethods"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getMethods}{}}}
\subsection{Method \code{getMethods()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getMethods(contains = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contains}}{a string that the methods names returned must contain}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of names of the methods of the object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- "ClrFacade.TestObject"
testObj <- newObjectFromName(testClassName)
testObj$getMethods()
testObj$getMethods("Get")
Print
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-print"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-print}{}}}
\subsection{Method \code{print()}}{
print prints a summary of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$print()}\if{html}{\out{</div>}}
}

}
}
