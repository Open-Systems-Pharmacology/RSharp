[{"path":"https://www.open-systems-pharmacology.org/rSharp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Open Systems Pharmacology. Copyright holder. esqLABS. Funder. Pavel Balazki. Author, maintainer. Juri Solodenko. Author. Michael Sevestre. Author. Robert McIntosh. Author. Ian Peter Du. Author. Jean-Michel Perraud. Author.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balazki P, Solodenko J, Sevestre M, McIntosh R, Du , Perraud J (2024). rSharp: Accessing .NET R. R package version 0.0.0.9000, https://github.com/Open-Systems-Pharmacology/rsharp/.","code":"@Manual{,   title = {rSharp: Accessing .NET from R},   author = {Pavel Balazki and Juri Solodenko and Michael Sevestre and Robert McIntosh and Ian Peter Du and Jean-Michel Perraud},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/Open-Systems-Pharmacology/rsharp/}, }"},{"path":"https://www.open-systems-pharmacology.org/rSharp/index.html","id":"ospsuiteparameteridentification","dir":"","previous_headings":"","what":"Accessing .NET from R","title":"Accessing .NET from R","text":"RSharp R package provides access .NET libraries R. allows create .NET objects, access field, call methods. package based rClr package utilizes code base.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/rSharp/index.html","id":"user-guide","dir":"","previous_headings":"","what":"User guide","title":"Accessing .NET from R","text":"Examples running parameter estimation tasks using package detailed vignette('user-guide').","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Accessing .NET from R","text":"Everyone interacting Open Systems Pharmacology community (codebases, issue trackers, chat rooms, mailing lists etc…) expected follow Open Systems Pharmacology code conduct.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Accessing .NET from R","text":"encourage contribution Open Systems Pharmacology community. getting started please read contribution guidelines. contributing code, please familiar coding standards.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Accessing .NET from R","text":"{RSharp} package released GPLv2 License. trademarks within document belong legitimate owners.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/callStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Call a static method on a .NET type — callStatic","title":"Call a static method on a .NET type — callStatic","text":"Call static method .NET type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/callStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call a static method on a .NET type — callStatic","text":"","code":"callStatic(typename, methodName, ...)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/callStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call a static method on a .NET type — callStatic","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. methodName name static method type ... additional method arguments passed .External (e.g., arguments method)","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/callStatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call a static method on a .NET type — callStatic","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/callStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call a static method on a .NET type — callStatic","text":"","code":"cTypename <- getRSharpSetting(\"testCasesTypeName\") callStatic(cTypename, \"IsTrue\", TRUE) #> [1] TRUE"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/castToRObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Create if possible an object of the R6 class `NetObject` — castToRObject","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"Create possible object R6 class `NetObject`","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/castToRObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"","code":"castToRObject(obj)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/castToRObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"obj presumed external pointer.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/castToRObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"`NetObject` R6 object argument indeed external pointer, otherwise returned unchanged.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/castToRObject.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create if possible an object of the R6 class `NetObject` — castToRObject","text":"Create possible adequate R6 object class `NetObject` wraps external pointer .NET object. `obj` pointer, returns `obj` unchanged.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-clrTypeNameExtPtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the type name of an object — .clrTypeNameExtPtr","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"Gets type name object, given SEXP external pointer .NET object.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-clrTypeNameExtPtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"","code":".clrTypeNameExtPtr(extPtr)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-clrTypeNameExtPtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"extPtr external pointer .NET object (`cobjRef` S4 `NetObject` object)","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-clrTypeNameExtPtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"character string, type name","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-clrTypeNameExtPtr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the type name of an object — .clrTypeNameExtPtr","text":"","code":"if (FALSE) { testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) .clrTypeNameExtPtr(testObj$pointer) }"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-getCurrentConvertedObject.html","id":null,"dir":"Reference","previous_headings":"","what":"System function to get a direct access to an object — .getCurrentConvertedObject","title":"System function to get a direct access to an object — .getCurrentConvertedObject","text":"function highly unlikely use end user, even advanced one. indirectly needed unlock benefits using R.NET convert data structures R .NET.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-getCurrentConvertedObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System function to get a direct access to an object — .getCurrentConvertedObject","text":"","code":".getCurrentConvertedObject()"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-getCurrentConvertedObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System function to get a direct access to an object — .getCurrentConvertedObject","text":"`cobjRef` S4 object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-mkClrObjRef.html","id":null,"dir":"Reference","previous_headings":"","what":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"Create possible adequate S4 object wraps external pointer `cobjRef` object.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-mkClrObjRef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"","code":".mkClrObjRef(obj, clrtype = NULL)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-mkClrObjRef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"obj presumed external pointer. clrtype character; name type object. NULL, rSharp retrieves type name.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/dot-mkClrObjRef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create if possible an S4 `cobjRef` object. — .mkClrObjRef","text":"cobjRef S4 object argument indeed external pointer, otherwise returned unchanged.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getConstructors.html","id":null,"dir":"Reference","previous_headings":"","what":"List the public constructors of a CLR Type — getConstructors","title":"List the public constructors of a CLR Type — getConstructors","text":"List public constructors CLR Type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getConstructors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the public constructors of a CLR Type — getConstructors","text":"","code":"getConstructors(type)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getConstructors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the public constructors of a CLR Type — getConstructors","text":"type .NET Type, (character) type name can successfully parsed","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getConstructors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the public constructors of a CLR Type — getConstructors","text":"list constructor signatures","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getConstructors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the public constructors of a CLR Type — getConstructors","text":"","code":"testClassName <- \"ClrFacade.TestObject\" getConstructors(testClassName) #> [1] \"Constructor: .ctor\"                               #> [2] \"Constructor: .ctor, Double\"                       #> [3] \"Constructor: .ctor, Double, Double\"               #> [4] \"Constructor: .ctor, Int32\"                        #> [5] \"Constructor: .ctor, Int32, Int32\"                 #> [6] \"Constructor: .ctor, Int32, Int32, Double, Double\""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getEnumNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the names of a .NET Enum value type — getEnumNames","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"Gets names .NET Enum value type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getEnumNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"","code":"getEnumNames(enumType)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getEnumNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"enumType .NET object, System.Type type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getEnumNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"character vector names enum","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getEnumNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the names of a .NET Enum value type — getEnumNames","text":"","code":"enumName <- \"ClrFacade.TestEnum\" getEnumNames(enumName) #> [1] \"A\" \"B\" \"C\" # Get enum names from object enumObj <- newObjectFromName(enumName) getEnumNames(enumObj) #> [1] \"A\" \"B\" \"C\""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getLoadedAssemblies.html","id":null,"dir":"Reference","previous_headings":"","what":"List the names of loaded assemblies — getLoadedAssemblies","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"List names loaded assemblies","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getLoadedAssemblies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"","code":"getLoadedAssemblies(fullname = FALSE, filenames = FALSE)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getLoadedAssemblies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"fullname full name assemblies returned. `FALSE` default. filenames TRUE, return data frame second column URI (usually file path) loaded assembly. `FALSE` default.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getLoadedAssemblies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"names loaded assemblies","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getLoadedAssemblies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the names of loaded assemblies — getLoadedAssemblies","text":"","code":"getLoadedAssemblies() #>  [1] \"System.Private.CoreLib\"                     #>  [2] \"ClrFacade\"                                  #>  [3] \"System.Runtime\"                             #>  [4] \"System.Runtime.InteropServices\"             #>  [5] \"System.Console\"                             #>  [6] \"System.Linq\"                                #>  [7] \"System.Collections\"                         #>  [8] \"RDotNet\"                                    #>  [9] \"netstandard\"                                #> [10] \"System.Linq.Expressions\"                    #> [11] \"DynamicInterop\"                             #> [12] \"Microsoft.Win32.Primitives\"                 #> [13] \"System.Collections.Concurrent\"              #> [14] \"System.Threading\"                           #> [15] \"System.Runtime.Numerics\"                    #> [16] \"Microsoft.CSharp\"                           #> [17] \"System.Reflection.Emit.ILGeneration\"        #> [18] \"System.Reflection.Emit.Lightweight\"         #> [19] \"System.Reflection.Primitives\"               #> [20] \"Anonymously Hosted DynamicMethods Assembly\""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getRSharpSetting.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value of a global `rShapr` setting. — getRSharpSetting","title":"Get the value of a global `rShapr` setting. — getRSharpSetting","text":"Get value global `rShapr` setting.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getRSharpSetting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value of a global `rShapr` setting. — getRSharpSetting","text":"","code":"getRSharpSetting(settingName)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getRSharpSetting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value of a global `rShapr` setting. — getRSharpSetting","text":"settingName String name setting","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getRSharpSetting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the value of a global `rShapr` setting. — getRSharpSetting","text":"Value setting stored rSharpEnv. setting exist, error thrown.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getRSharpSetting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the value of a global `rShapr` setting. — getRSharpSetting","text":"","code":"getRSharpSetting(\"nativePkgName\") #> [1] \"RsharpMs\""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getSexpType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the type code for a SEXP — getSexpType","title":"Get the type code for a SEXP — getSexpType","text":"Get type code SEXP, returned TYPEOF macro","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getSexpType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the type code for a SEXP — getSexpType","text":"","code":"getSexpType(sexp)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getSexpType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the type code for a SEXP — getSexpType","text":"sexp R object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getSexpType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the type code for a SEXP — getSexpType","text":"type code, integer, defined Rinternals.h","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getSexpType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the type code for a SEXP — getSexpType","text":"","code":"getSexpType(1) #> [1] 14 getSexpType(\"a\") #> [1] 16 getSexpType(1:10) #> [1] 13"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the value of a static field or property of a class — getStatic","title":"Gets the value of a static field or property of a class — getStatic","text":"Gets value static field property class","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the value of a static field or property of a class — getStatic","text":"","code":"getStatic(type, name)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the value of a static field or property of a class — getStatic","text":"type Type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. name name field/property  object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the value of a static field or property of a class — getStatic","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the value of a static field or property of a class — getStatic","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") getStatic(testClassName, \"StaticPropertyIntegerOne\") #> [1] 0"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static fields for a type — getStaticFields","title":"Gets the static fields for a type — getStaticFields","text":"Gets static fields type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static fields for a type — getStaticFields","text":"","code":"getStaticFields(objOrType, contains = \"\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static fields for a type — getStaticFields","text":"objOrType `NetObject` object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. contains string property names returned must contain","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMembers.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static members for a type — getStaticMembers","title":"Gets the static members for a type — getStaticMembers","text":"Gets static members type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMembers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static members for a type — getStaticMembers","text":"","code":"getStaticMembers(objOrType)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMembers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static members for a type — getStaticMembers","text":"objOrType .NET object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMembers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the static members for a type — getStaticMembers","text":"","code":"cTypename <- getRSharpSetting(\"testCasesTypeName\") getStaticMembers(cTypename) #> $Methods #>  [1] \"CallGC\"                            \"CheckIsDailySequence\"              #>  [3] \"ComplexEquals\"                     \"ComplexEquals\"                     #>  [5] \"ConvertTime\"                       \"CreateArrayMemFootprint\"           #>  [7] \"CreateComplex\"                     \"CreateComplex\"                     #>  [9] \"CreateDate\"                        \"CreateDateArray\"                   #> [11] \"CreateDateArraySeconds\"            \"CreateDouble\"                      #> [13] \"CreateEmptyArray\"                  \"CreateEmptyArrayBool\"              #> [15] \"CreateEmptyArrayByte\"              \"CreateEmptyArrayDouble\"            #> [17] \"CreateEmptyArrayFloat\"             \"CreateEmptyArrayInt\"               #> [19] \"CreateEmptyArrayLong\"              \"CreateEmptyArrayString\"            #> [21] \"CreateException\"                   \"CreateFloat\"                       #> [23] \"CreateFloatArray\"                  \"CreateInnerExceptions\"             #> [25] \"CreateInt\"                         \"CreateIntArray\"                    #> [27] \"CreateJaggedDoubleArray\"           \"CreateJaggedFloatArray\"            #> [29] \"CreateLong\"                        \"CreateMemTestObj\"                  #> [31] \"CreateNumArray\"                    \"CreateNumArrayMissingVal\"          #> [33] \"CreateObjectDictionary\"            \"CreateRectDoubleArray\"             #> [35] \"CreateRectFloatArray\"              \"CreateString\"                      #> [37] \"CreateStringArray\"                 \"CreateStringDictionary\"            #> [39] \"CreateStringDoubleArrayDictionary\" \"CreateTestArrayGenericInterface\"   #> [41] \"CreateTestArrayGenericObjects\"     \"CreateTestArrayInterface\"          #> [43] \"CreateTestDataFrame\"               \"CreateTestNumericVector\"           #> [45] \"CreateTestObject\"                  \"CreateTestObjectGenericInstance\"   #> [47] \"CreateTimeSpanArray\"               \"DateEquals\"                        #> [49] \"DateEquals\"                        \"DateEquals\"                        #> [51] \"DoubleEquals\"                      \"GetComplexDataCase\"                #> [53] \"GetComplexDataTypeName\"            \"GetExceptionMessage\"               #> [55] \"GetFalse\"                          \"GetMemTestObjCounter\"              #> [57] \"GetNumComplexDataCases\"            \"GetPrivateMemoryMegabytes\"         #> [59] \"GetRFunctionInvoke\"                \"GetTestEnum\"                       #> [61] \"GetTrue\"                           \"GetWorkingSetMemoryMegabytes\"      #> [63] \"IntEquals\"                         \"IsTrue\"                            #> [65] \"NumArrayEquals\"                    \"NumArrayMissingValuesEquals\"       #> [67] \"NumericMatrixEquals\"               \"SinkDateTime\"                      #> [69] \"SinkLargeObject\"                   \"StringArrayEquals\"                 #> [71] \"StringArrayMissingValuesEquals\"    \"StringEquals\"                      #> [73] \"ThrowException\"                    \"TimeSpanEquals\"                    #> [75] \"TimeZoneToLocalDate\"               \"UtcDateEquals\"                     #> [77] \"UtcDateEquals\"                     \"UtcDateForTimeZone\"                #> [79] \"UtcDateForTimeZone\"                #>  #> $Fields #> character(0) #>  #> $Properties #> character(0) #>"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMemberSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the signature of a static member of a type — getStaticMemberSignature","title":"Gets the signature of a static member of a type — getStaticMemberSignature","text":"Gets signature static member type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMemberSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the signature of a static member of a type — getStaticMemberSignature","text":"","code":"getStaticMemberSignature(typename, memberName)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMemberSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the signature of a static member of a type — getStaticMemberSignature","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. memberName exact name member (.e. field, property, method) search ","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static methods for a type — getStaticMethods","title":"Gets the static methods for a type — getStaticMethods","text":"Gets static methods type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static methods for a type — getStaticMethods","text":"","code":"getStaticMethods(objOrType, contains = \"\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticMethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static methods for a type — getStaticMethods","text":"objOrType `NetObject` object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. contains string property names returned must contain","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticProperties.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the static properties for a type — getStaticProperties","title":"Gets the static properties for a type — getStaticProperties","text":"Gets static properties type","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticProperties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the static properties for a type — getStaticProperties","text":"","code":"getStaticProperties(objOrType, contains = \"\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getStaticProperties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the static properties for a type — getStaticProperties","text":"objOrType `NetObject` object, type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. contains string property names returned must contain","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getType.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"Returns `NetObject` object external pointer object type `System.RuntimeType` represents type .NET object. get string representation type, call `toStringNET` returned object.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"","code":"getType(objOrTypename)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"objOrTypename object class `NEtObject` character vector length one. can full file name assembly load, fully qualified assembly name, last resort partial name.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"`NetObject` pointer `System.RuntimeType` `objOrTypename`.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the pointer to the `System.RuntimeType` of a `NetObject` object or a .NET type name. — getType","text":"","code":"testClassName <- \"ClrFacade.TestObject\" type <- getType(testClassName) toStringNET(type) #> [1] \"ClrFacade.TestObject\"  testObj <- newObjectFromName(testClassName) type <- getType(testObj) toStringNET(type) #> [1] \"ClrFacade.TestObject\""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getTypesInAssembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"Get list .NET type names exported assembly","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getTypesInAssembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"","code":"getTypesInAssembly(assemblyName)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getTypesInAssembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"assemblyName name assembly","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getTypesInAssembly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"names types exported assembly","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/getTypesInAssembly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a list of .NET type names exported by an assembly — getTypesInAssembly","text":"","code":"getTypesInAssembly(\"ClrFacade\") #>  [1] \"ClrFacade.ClrFacade\"                                      #>  [2] \"ClrFacade.ClrObjectToSexpDelegate\"                        #>  [3] \"ClrFacade.IUnmanagedDll\"                                  #>  [4] \"ClrFacade.DataConversionHelper\"                           #>  [5] \"ClrFacade.SymbolicExpressionWrapper\"                      #>  [6] \"ClrFacade.DataConverterExtensions\"                        #>  [7] \"ClrFacade.HelloWorld\"                                     #>  [8] \"ClrFacade.IDataConverter\"                                 #>  [9] \"ClrFacade.Internal\"                                       #> [10] \"ClrFacade.PerformanceProfiling\"                           #> [11] \"ClrFacade.RDotNetDataConverter\"                           #> [12] \"ClrFacade.RdotnetDataConverterTests\"                      #> [13] \"ClrFacade.ReflectionHelper\"                               #> [14] \"ClrFacade.RSharpValueType\"                                #> [15] \"ClrFacade.RSharpGenericValueExtensions\"                   #> [16] \"ClrFacade.RSharpGenericValue\"                             #> [17] \"ClrFacade.RSharpUnmanagedDll\"                             #> [18] \"ClrFacade.TestArrayMemoryHandling\"                        #> [19] \"ClrFacade.TestCases\"                                      #> [20] \"ClrFacade.ITestInterface\"                                 #> [21] \"ClrFacade.ITestGenericInterface`1\"                        #> [22] \"ClrFacade.TestEnum\"                                       #> [23] \"ClrFacade.TestFlagEnum\"                                   #> [24] \"ClrFacade.TestObjectGeneric`1\"                            #> [25] \"ClrFacade.TestObject\"                                     #> [26] \"ClrFacade.TestMethodBinding\"                              #> [27] \"ClrFacade.ITestMethodBindings\"                            #> [28] \"ClrFacade.Tests.TestUtilities\"                            #> [29] \"ClrFacade.Tests.RefClasses.BaseAbstractClassOne\"          #> [30] \"ClrFacade.Tests.RefClasses.InterfaceOne\"                  #> [31] \"ClrFacade.Tests.RefClasses.InterfaceBaseTwo\"              #> [32] \"ClrFacade.Tests.RefClasses.InterfaceBaseOne\"              #> [33] \"ClrFacade.Tests.RefClasses.InterfaceTwo\"                  #> [34] \"ClrFacade.Tests.RefClasses.LevelOneClass\"                 #> [35] \"ClrFacade.Tests.RefClasses.LevelThreeClass\"               #> [36] \"ClrFacade.Tests.RefClasses.LevelTwoClass\"                 #> [37] \"ClrFacade.ClrFacade+CallInstanceMethodDelegate\"           #> [38] \"ClrFacade.ClrFacade+CreateSexpWrapperDelegate\"            #> [39] \"ClrFacade.ClrFacade+CallStaticMethodDelegate\"             #> [40] \"ClrFacade.ClrFacade+CurrentObjectDelegate\"                #> [41] \"ClrFacade.ClrFacade+CreateInstanceDelegate\"               #> [42] \"ClrFacade.ClrFacade+GetObjectTypeNameDelegate\"            #> [43] \"ClrFacade.ClrFacade+LoadFromDelegate\"                     #> [44] \"ClrFacade.ClrFacade+FreeObjectDelegate\"                   #> [45] \"ClrFacade.RdotnetDataConverterTests+MemTestObjectRDotnet\""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/inspectArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"Inspect one R object get information representation engine. function mostly useful R/rSharp developers. derived 'showArgs' example R extension manual","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/inspectArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"","code":"inspectArgs(...)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/inspectArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"... one R objects","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/inspectArgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"NULL. Information printed, returned.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/inspectArgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Peek into the structure of R objects 'as seen from C code' — inspectArgs","text":"","code":"inspectArgs(1, \"a\", 1:10) #> [1] '<unnamed>' R type double, SEXPTYPE=14 #> [1] '<unnamed>' length 1 #> [1] names of length 0 #> [2] '<unnamed>' R type character, SEXPTYPE=16 #> [2] '<unnamed>' length 1 #> [2] names of length 0 #> [3] '<unnamed>' R type integer, SEXPTYPE=13 #> [3] '<unnamed>' length 10 #> [3] names of length 0"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/loadAssembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads a .NET assembly. — loadAssembly","title":"Loads a .NET assembly. — loadAssembly","text":"Loads .NET assembly.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/loadAssembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads a .NET assembly. — loadAssembly","text":"","code":"loadAssembly(name)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/loadAssembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads a .NET assembly. — loadAssembly","text":"name character vector length one. can full file name assembly load, fully qualified assembly name, last resort partial name.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/loadAssembly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loads a .NET assembly. — loadAssembly","text":"Note loaded single application domain created rSharp, separate application domain.","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/loadAssembly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loads a .NET assembly. — loadAssembly","text":"","code":"if (FALSE) { f <- file.path(\"SomeDirectory\", \"YourDotNetBinaryFile.dll\") f <- path.expand(f) stopifnot(file.exists(f)) loadAssembly(f) }"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":null,"dir":"Reference","previous_headings":"","what":"NetObject — NetObject","title":"NetObject — NetObject","text":"Base wrapper class pointers .NET objects. Offers basic methods interact .NET objects.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"NetObject — NetObject","text":"type String representation type .NET object. Read-pointer external pointer .NET object. Read-","code":""},{"path":[]},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"NetObject — NetObject","text":"NetObject$new() NetObject$getFields() NetObject$getProperties() NetObject$getMethods() NetObject$getMemberSignature() NetObject$call() NetObject$get() NetObject$set() NetObject$print()","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"NetObject — NetObject","text":"Initializes object.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$new(pointer)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"pointer external pointer .NET object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"initialized object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- \"ClrFacade.Tests.RefClasses.LevelOneClass\" o <- .External(\"r_create_clr_object\", testClassName, PACKAGE = getRSharpSetting(\"nativePkgName\")) x <- newObjectFromName(testClassName) print(x)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-getfields-","dir":"Reference","previous_headings":"","what":"Method getFields()","title":"NetObject — NetObject","text":"List fields object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getFields(contains = \"\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string field names returned must contain","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names fields object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getFields() testObj$getFields(\"ieldInt\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-getproperties-","dir":"Reference","previous_headings":"","what":"Method getProperties()","title":"NetObject — NetObject","text":"List properties object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getProperties(contains = \"\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string property names returned must contain","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names properties object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getProperties() testObj$getProperties(\"One\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-getmethods-","dir":"Reference","previous_headings":"","what":"Method getMethods()","title":"NetObject — NetObject","text":"List methods object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getMethods(contains = \"\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"contains string methods names returned must contain","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"list names methods object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMethods() testObj$getMethods(\"Get\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-getmembersignature-","dir":"Reference","previous_headings":"","what":"Method getMemberSignature()","title":"NetObject — NetObject","text":"Gets string representation signature member (.e. field, property, method). Mostly used interactively search arguments pass method.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$getMemberSignature(memberName)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"memberName exact name member (.e. field, property, method) search ","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"character vector summary information method/member signatures","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMemberSignature(\"set_PropertyIntegerOne\") testObj$getMemberSignature(\"FieldIntegerOne\") testObj$getMemberSignature(\"PropertyIntegerTwo\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-call-","dir":"Reference","previous_headings":"","what":"Method call()","title":"NetObject — NetObject","text":"Call method object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$call(methodName, ...)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"methodName name method object ... additional method arguments","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$call(\"GetFieldIntegerOne\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"NetObject — NetObject","text":"Gets value field property object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$get(name)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"name name field/property  object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"NetObject — NetObject","text":"object resulting call. May `NetObject` object, native R object common types. Can NULL.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$get(\"FieldIntegerOne\")"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-set-","dir":"Reference","previous_headings":"","what":"Method set()","title":"NetObject — NetObject","text":"Sets value field property object.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$set(name, value)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"NetObject — NetObject","text":"name name field/property object value value set field ","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$set(\"FieldIntegerOne\", as.integer(42))"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"NetObject — NetObject","text":"Prints summary object.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"NetObject — NetObject","text":"","code":"NetObject$print()"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/NetObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NetObject — NetObject","text":"","code":"## ------------------------------------------------ ## Method `NetObject$new` ## ------------------------------------------------  testClassName <- \"ClrFacade.Tests.RefClasses.LevelOneClass\" o <- .External(\"r_create_clr_object\", testClassName, PACKAGE = getRSharpSetting(\"nativePkgName\")) x <- newObjectFromName(testClassName) print(x) #> NetObject:  #>    Type: ClrFacade.Tests.RefClasses.LevelOneClass  #>    Methods:: AbstractMethod AbstractMethod Equals         get_SomeInt    GetHashCode    GetType        ToString       VirtualMethod   #>    Fields:  #>    Properties: SomeInt   ## ------------------------------------------------ ## Method `NetObject$getFields` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getFields() #> [1] \"FieldDoubleOne\"  \"FieldDoubleTwo\"  \"FieldIntegerOne\" \"FieldIntegerTwo\" #> [5] \"PublicInt\"       testObj$getFields(\"ieldInt\") #> [1] \"FieldIntegerOne\" \"FieldIntegerTwo\"  ## ------------------------------------------------ ## Method `NetObject$getProperties` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getProperties() #> [1] \"PropertyIntegerOne\" \"PropertyIntegerTwo\" testObj$getProperties(\"One\") #> [1] \"PropertyIntegerOne\"  ## ------------------------------------------------ ## Method `NetObject$getMethods` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMethods() #>  [1] \"Equals\"                  \"get_PropertyIntegerOne\"  #>  [3] \"get_PropertyIntegerTwo\"  \"GetFieldIntegerOne\"      #>  [5] \"GetFieldIntegerTwo\"      \"GetHashCode\"             #>  [7] \"GetMethodWithParameters\" \"GetPublicInt\"            #>  [9] \"GetType\"                 \"set_PropertyIntegerOne\"  #> [11] \"set_PropertyIntegerTwo\"  \"TestDefaultValues\"       #> [13] \"TestParams\"              \"ToString\"                testObj$getMethods(\"Get\") #> [1] \"GetFieldIntegerOne\"      \"GetFieldIntegerTwo\"      #> [3] \"GetHashCode\"             \"GetMethodWithParameters\" #> [5] \"GetPublicInt\"            \"GetType\"                  ## ------------------------------------------------ ## Method `NetObject$getMemberSignature` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$getMemberSignature(\"set_PropertyIntegerOne\") #> [1] \"Method: Void set_PropertyIntegerOne, Int32\" testObj$getMemberSignature(\"FieldIntegerOne\") #> [1] \"Field FieldIntegerOne, Int32\" testObj$getMemberSignature(\"PropertyIntegerTwo\") #> [1] \"Property PropertyIntegerTwo, Int32, can write: True\"  ## ------------------------------------------------ ## Method `NetObject$call` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$call(\"GetFieldIntegerOne\") #> [1] 0  ## ------------------------------------------------ ## Method `NetObject$get` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$get(\"FieldIntegerOne\") #> [1] 0  ## ------------------------------------------------ ## Method `NetObject$set` ## ------------------------------------------------  testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) testObj$set(\"FieldIntegerOne\", as.integer(42))"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/newObjectFromName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new NetObject R6 object given the type name. — newObjectFromName","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"Create new NetObject R6 object given type name.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/newObjectFromName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"","code":"newObjectFromName(typename, ...)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/newObjectFromName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"typename type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. ... additional method arguments passed object constructor via call .External","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/newObjectFromName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"`NetObject` R6 object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/newObjectFromName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new NetObject R6 object given the type name. — newObjectFromName","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") testObj <- newObjectFromName(testClassName) # object with a constructor that has parameters testObj <- newObjectFromName(testClassName, as.integer(123))"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/printTraceback.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints the last .NET exception — printTraceback","title":"Prints the last .NET exception — printTraceback","text":"roughly equivalent traceback function R.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/printTraceback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints the last .NET exception — printTraceback","text":"","code":"printTraceback()"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/printTraceback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints the last .NET exception — printTraceback","text":"","code":"if (FALSE) { callStatic(getRSharpSetting(\"testCasesTypeName\"), \"ThrowException\", 10L) # will be truncated by the Rf_error API printTraceback() # prints the full stack trace }"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rSharpSettingNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","title":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","text":"Names settings stored rSharpEnv Can used `getRSharpSetting()`","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rSharpSettingNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","text":"","code":"rSharpSettingNames"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rSharpSettingNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Names of the settings stored in rSharpEnv Can be used with `getRSharpSetting()` — rSharpSettingNames","text":"object class character length 10.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rToDotNetType.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"Gets type .NET object resulting converting R object. function mostly documentation purposes, may use end users.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rToDotNetType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"","code":"rToDotNetType(x)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rToDotNetType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"x R object","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rToDotNetType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"list, columns including mode, type, class, length string corresponding .NET type.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/rToDotNetType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the type of a .NET object resulting from converting an R object — rToDotNetType","text":"","code":"rToDotNetType(1) #> $mode #> [1] \"numeric\" #>  #> $type #> [1] \"double\" #>  #> $class #> [1] \"numeric\" #>  #> $length #> [1] 1 #>  #> $clrType #> [1] \"System.Double\" #>"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setConvertAdvancedTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"Turn /conversion advanced data types R.NET. turn conversion classes dictionaries R lists, bidirectional may want see manipulate external pointers dictionaries circumstances.","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setConvertAdvancedTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"","code":"setConvertAdvancedTypes(enable = TRUE)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setConvertAdvancedTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"enable true enable, otherwise disable","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setConvertAdvancedTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn on/off the conversion of advanced data types with R.NET — setConvertAdvancedTypes","text":"","code":"library(rSharp) cTypename <- getRSharpSetting(\"testCasesTypeName\") callStatic(cTypename, \"CreateStringDictionary\") #> $a #> [1] \"A\" #>  #> $b #> [1] \"B\" #>  setConvertAdvancedTypes(FALSE) callStatic(cTypename, \"CreateStringDictionary\") #> NetObject:  #>    Type: System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]  #>    Methods:: Add               Clear             ContainsKey       ContainsValue     EnsureCapacity    Equals            get_Comparer      get_Count         get_Item          get_Keys          get_Values        GetEnumerator     GetHashCode       GetObjectData     GetType           OnDeserialization Remove            Remove            set_Item          ToString          TrimExcess        TrimExcess        TryAdd            TryGetValue        #>    Fields:  #>    Properties: Comparer Count    Item     Keys     Values"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the value of a field or property of an object or class — setStatic","title":"Sets the value of a field or property of an object or class — setStatic","text":"Sets value field property object class","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the value of a field or property of an object or class — setStatic","text":"","code":"setStatic(type, name, value)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the value of a field or property of an object or class — setStatic","text":"type Type name, possibly namespace assembly qualified type name, e.g. '.Namespace.MyClass,MyAssemblyName'. name name field/property object value value set field ","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/setStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the value of a field or property of an object or class — setStatic","text":"","code":"testClassName <- getRSharpSetting(\"testObjectTypeName\") setStatic(testClassName, \"StaticPropertyIntegerOne\", as.integer(42))"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/toStringNET.html","id":null,"dir":"Reference","previous_headings":"","what":"Calls the ToString method of an object — toStringNET","title":"Calls the ToString method of an object — toStringNET","text":"Calls ToString method object represented .NET. function help quickly test object equivalence R interpreter,  instance tricky topic date-time conversions","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/toStringNET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calls the ToString method of an object — toStringNET","text":"","code":"toStringNET(x)"},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/toStringNET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calls the ToString method of an object — toStringNET","text":"x R object, converted .NET object call ToString","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/toStringNET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calls the ToString method of an object — toStringNET","text":"string representation object .NET","code":""},{"path":"https://www.open-systems-pharmacology.org/rSharp/reference/toStringNET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calls the ToString method of an object — toStringNET","text":"","code":"library(rSharp) dt <- as.POSIXct(\"2001-01-01 02:03:04\", tz = \"UTC\") toStringNET(dt) #> [1] \"1/1/2001 2:03:04 AM\""}]
