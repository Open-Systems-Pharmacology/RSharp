<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    var arrayTypes = new Dictionary<string, string> 
    { 
        { "object", "object[]" },
        { "string", "string[]" },
        { "double", "double[]" },
        { "float", "float[]" },
        { "int", "int[]" },
        { "long", "long[]" },
        { "bool", "bool[]" },
        { "DateTime", "DateTime[]" },
        { "TimeSpan", "TimeSpan[]" },
        { "byte", "byte[]" },
        { "char", "char[]" },
        { "Type", "Type[]" },
    };

#>
using System;
using System.Reflection;
using Rclr;

namespace Rclr
{
    /// <summary>
    /// Do not modify the .cs file: T4 generated class to support the unit tests for method binding
    /// </summary>
    /// <remarks>
    /// Added initially as a basis for unit test for issue https://r2clr.codeplex.com/workitem/70
    /// </remarks>
    public class TestArrayMemoryHandling
    {
<#
foreach (var item in arrayTypes)
{
#>

        public <#=item.Value#> FieldArray_<#=item.Key#>;
        public static <#=item.Value#> CreateArray_<#=item.Key#>(int size) 
        {
            return (<#=item.Value#>)Array.CreateInstance(typeof(<#=item.Key#>), size);
        }
        public static <#=item.Value#> CreateArray_<#=item.Key#>(int size, <#=item.Key#> value) 
        {
            var result =  (<#=item.Value#>)Array.CreateInstance(typeof(<#=item.Key#>), size);
			for(int i = 0; i < result.Length; i++) result[i] = value;
			return result;
        }
<#
} // end foreach
#>
		// To test the type of empty vectors:
        public static bool CheckElementType(Array array, Type expectedElementType)
        {
            return (array.GetType().GetElementType() == expectedElementType);
        }
    }
}
