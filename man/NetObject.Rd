% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/net-object.R
\docType{class}
\name{NetObject}
\alias{NetObject}
\title{NetObject}
\description{
Base wrapper class for the pointers to .NET objects. Offers basic methods to interact with the .NET objects.
}
\examples{

## ------------------------------------------------
## Method `NetObject$new`
## ------------------------------------------------

testClassName <- "ClrFacade.Tests.RefClasses.LevelOneClass"
o <- .External("r_create_clr_object", testClassName, PACKAGE = getRSharpSetting("nativePkgName"))
x <- newObjectFromName(testClassName)
print(x)

## ------------------------------------------------
## Method `NetObject$getFields`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getFields()
testObj$getFields("ieldInt")

## ------------------------------------------------
## Method `NetObject$getProperties`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getProperties()
testObj$getProperties("One")

## ------------------------------------------------
## Method `NetObject$getMethods`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getMethods()
testObj$getMethods("Get")

## ------------------------------------------------
## Method `NetObject$getMemberSignature`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getMemberSignature("set_PropertyIntegerOne")
testObj$getMemberSignature("FieldIntegerOne")
testObj$getMemberSignature("PropertyIntegerTwo")

## ------------------------------------------------
## Method `NetObject$call`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$call("GetFieldIntegerOne")

## ------------------------------------------------
## Method `NetObject$get`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$get("FieldIntegerOne")

## ------------------------------------------------
## Method `NetObject$set`
## ------------------------------------------------

testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$set("FieldIntegerOne", as.integer(42))
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{type}}{String representation of the type of the .NET object. Read-only}

\item{\code{pointer}}{The external pointer to the .NET object. Read-only}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-NetObject-new}{\code{NetObject$new()}}
\item \href{#method-NetObject-finalize}{\code{NetObject$finalize()}}
\item \href{#method-NetObject-getFields}{\code{NetObject$getFields()}}
\item \href{#method-NetObject-getProperties}{\code{NetObject$getProperties()}}
\item \href{#method-NetObject-getMethods}{\code{NetObject$getMethods()}}
\item \href{#method-NetObject-getMemberSignature}{\code{NetObject$getMemberSignature()}}
\item \href{#method-NetObject-call}{\code{NetObject$call()}}
\item \href{#method-NetObject-get}{\code{NetObject$get()}}
\item \href{#method-NetObject-set}{\code{NetObject$set()}}
\item \href{#method-NetObject-print}{\code{NetObject$print()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-new"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-new}{}}}
\subsection{Method \code{new()}}{
Initializes the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$new(pointer)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pointer}}{The external pointer to the .NET object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The initialized object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- "ClrFacade.Tests.RefClasses.LevelOneClass"
o <- .External("r_create_clr_object", testClassName, PACKAGE = getRSharpSetting("nativePkgName"))
x <- newObjectFromName(testClassName)
print(x)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-finalize}{}}}
\subsection{Method \code{finalize()}}{
Method called on object destruction
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getFields"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getFields}{}}}
\subsection{Method \code{getFields()}}{
List the fields of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getFields(contains = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contains}}{a string that the field names returned must contain}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of names of the fields of the object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getFields()
testObj$getFields("ieldInt")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getProperties"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getProperties}{}}}
\subsection{Method \code{getProperties()}}{
List the properties of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getProperties(contains = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contains}}{a string that the property names returned must contain}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of names of the properties of the object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getProperties()
testObj$getProperties("One")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getMethods"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getMethods}{}}}
\subsection{Method \code{getMethods()}}{
List the methods the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getMethods(contains = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contains}}{a string that the methods names returned must contain}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of names of the methods of the object
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getMethods()
testObj$getMethods("Get")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-getMemberSignature"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-getMemberSignature}{}}}
\subsection{Method \code{getMemberSignature()}}{
Gets a string representation of the signature of a member (i.e. field, property, method).
Mostly used to interactively search for what arguments to pass to a method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$getMemberSignature(memberName)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{memberName}}{The exact name of the member (i.e. field, property, method) to search for}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a character vector with summary information on the method/member signatures
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$getMemberSignature("set_PropertyIntegerOne")
testObj$getMemberSignature("FieldIntegerOne")
testObj$getMemberSignature("PropertyIntegerTwo")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-call"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-call}{}}}
\subsection{Method \code{call()}}{
Call a method of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$call(methodName, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{methodName}}{the name of a method of the object}

\item{\code{...}}{additional method arguments}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object resulting from the call. May be a `NetObject` object, or a native R object for common types. Can be NULL.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$call("GetFieldIntegerOne")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-get"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-get}{}}}
\subsection{Method \code{get()}}{
Gets the value of a field or property of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$get(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of a field/property  of the object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object resulting from the call. May be a `NetObject` object, or a native R object for common types. Can be NULL.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$get("FieldIntegerOne")
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-set"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-set}{}}}
\subsection{Method \code{set()}}{
Sets the value of a field or property of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$set(name, value, asInteger = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{the name of a field/property of the object}

\item{\code{value}}{the value to set the field with}

\item{\code{asInteger}}{Boolean whether to convert the value to an integer.
Used for cases where .NET signature requires an integer. Ignored if `value` is not numeric.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{testClassName <- getRSharpSetting("testObjectTypeName")
testObj <- newObjectFromName(testClassName)
testObj$set("FieldIntegerOne", as.integer(42))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-NetObject-print"></a>}}
\if{latex}{\out{\hypertarget{method-NetObject-print}{}}}
\subsection{Method \code{print()}}{
Prints a summary of the object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{NetObject$print()}\if{html}{\out{</div>}}
}

}
}
